openapi: 3.0.3
info:
  title: FinTrack API
  version: "1.0.0"
  description: |
    Публичное REST API платформы управления личными финансами **FinTrack**.  
    Все эндпоинты находятся под базовым URL `https://api.fintrack.com/v1`.  
    Аутентификация — JWT в заголовке **Authorization: Bearer &lt;token&gt;**.  
    ---
    © 2025 FinTrack Team
servers:
  - url: https://api.fintrack.com/v1
security:
  - bearerAuth: []
tags:
  - name: Auth
    description: Регистрация и получение токенов
  - name: Users
  - name: Transactions
  - name: Budgets
  - name: Goals
  - name: Reports
  - name: Bank Sync
  - name: Notifications

paths:

  /auth/register:
    post:
      tags: [Auth]
      summary: Регистрация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        201:
          description: Пользователь создан
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthTokens' }
        409: { $ref: '#/components/responses/Error409' }

  /auth/login:
    post:
      tags: [Auth]
      summary: Логин (e‑mail + пароль)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        200:
          description: Успешная авторизация
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthTokens' }
        401: { $ref: '#/components/responses/Error401' }

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Обновить access‑токен по refresh‑токену
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Новый access‑токен
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthTokens' }
        401: { $ref: '#/components/responses/Error401' }

  /users/me:
    get:
      tags: [Users]
      summary: Профиль текущего пользователя
      security: [{ bearerAuth: [] }]
      responses:
        200:
          description: Информация о пользователе
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        401: { $ref: '#/components/responses/Error401' }

  /transactions:
    get:
      tags: [Transactions]
      summary: Список транзакций (фильтрация, пагинация)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: fromDate
          schema: { type: string, format: date }
        - in: query
          name: toDate
          schema: { type: string, format: date }
        - in: query
          name: category
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, default: 50, maximum: 200 }
      responses:
        200:
          description: Массив транзакций
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Transaction' }
                  page: { type: integer }
                  totalPages: { type: integer }
        401: { $ref: '#/components/responses/Error401' }

    post:
      tags: [Transactions]
      summary: Добавить новую транзакцию
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TransactionInput' }
      responses:
        201:
          description: Создано
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Transaction' }
        400: { $ref: '#/components/responses/Error400' }
        401: { $ref: '#/components/responses/Error401' }

  /transactions/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    get:
      tags: [Transactions]
      summary: Получить транзакцию по ID
      security: [{ bearerAuth: [] }]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Transaction' }
        404: { $ref: '#/components/responses/Error404' }
    patch:
      tags: [Transactions]
      summary: Обновить транзакцию
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TransactionInput' }
      responses:
        200:
          description: Обновлено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Transaction' }
        404: { $ref: '#/components/responses/Error404' }
    delete:
      tags: [Transactions]
      summary: Удалить транзакцию
      security: [{ bearerAuth: [] }]
      responses:
        204: { description: Удалено }
        404: { $ref: '#/components/responses/Error404' }

  /budgets:
    get:
      tags: [Budgets]
      summary: Текущие бюджеты
      security: [{ bearerAuth: [] }]

      responses:
        200:
          description: Текущие бюджеты
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Budget' }
    post:
      tags: [Budgets]
      summary: Создать/обновить бюджет
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BudgetInput' }
      responses:
        201:
          description: Создать/обновить бюджет
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Budget' }

  /goals:
    get:
      tags: [Goals]
      summary: Список финансовых целей
      security: [{ bearerAuth: [] }]
      responses:
        200:
          description: Список финансовых целей
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Goal' }
    post:
      tags: [Goals]
      summary: Создать цель
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GoalInput' }
      responses:
        201:
          description: Создать цель
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Goal' }

  /goals/{id}/progress:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    patch:
      tags: [Goals]
      summary: Обновить прогресс цели
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: double
      responses:
        200:
          description: Обновить прогресс цели
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Goal' }

  /reports/summary:
    get:
      tags: [Reports]
      summary: Сводный отчёт по доходам/расходам
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [week, month, quarter, year]
            default: month
      responses:
        200:
          description: Сводный отчёт по доходам/расходам
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReportSummary' }

  /reports/export:
    post:
      tags: [Reports]
      summary: Экспорт отчёта (PDF или CSV)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ExportRequest' }
      responses:
        202:
          description: Задача поставлена в очередь, Location заголовок содержит URL статуса
          headers:
            Location:
              description: URL для проверки статуса/скачивания
              schema: { type: string, format: uri }

  /sync/bank:
    post:
      tags: [Bank Sync]
      summary: Запустить синхронизацию счетов/транзакций из банка
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BankSyncRequest' }
      responses:
        202:
          description: Синхронизация запущена
        429:
          description: Rate limit exceeded

  /notifications/test:
    post:
      tags: [Notifications]
      summary: Тестовое уведомление себе
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                channel: { type: string, enum: [telegram, email] }
                message: { type: string }
      responses:
        200:
          description: OK

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Error400:
      description: Неверный запрос
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Error401:
      description: Требуется аутентификация
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Error404:
      description: Не найдено
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Error409:
      description: Конфликт (учётная запись уже существует)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:

    ## Авторизация ##
    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
        fullName: { type: string, example: "Ivan Petrov" }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    AuthTokens:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string, nullable: true }
      required: [accessToken]

    ## Пользователь ##
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        fullName: { type: string }
        premium: { type: boolean }
        createdAt: { type: string, format: date-time }

    ## Транзакции ##
    Transaction:
      allOf:
        - $ref: '#/components/schemas/TransactionInput'
        - type: object
          required: [id, createdAt]
          properties:
            id: { type: string, format: uuid }
            createdAt: { type: string, format: date-time }

    TransactionInput:
      type: object
      required: [amount, currency, date, type]
      properties:
        amount: { type: number, format: double, example: 1500.25 }
        currency: { type: string, example: RUB }
        date: { type: string, format: date }
        type: { type: string, enum: [income, expense] }
        category: { type: string, example: food }
        comment: { type: string }
        tags:
          type: array
          items: { type: string }

    ## Бюджеты ##
    Budget:
      allOf:
        - $ref: '#/components/schemas/BudgetInput'
        - type: object
          required: [id]
          properties:
            id: { type: string, format: uuid }

    BudgetInput:
      type: object
      required: [category, limit, period]
      properties:
        category: { type: string }
        limit: { type: number, format: double }
        period: { type: string, enum: [month, quarter, year] }

    ## Цели ##
    Goal:
      allOf:
        - $ref: '#/components/schemas/GoalInput'
        - type: object
          required: [id, currentAmount]
          properties:
            id: { type: string, format: uuid }
            currentAmount: { type: number, format: double, default: 0 }

    GoalInput:
      type: object
      required: [name, targetAmount, targetDate]
      properties:
        name: { type: string }
        targetAmount: { type: number, format: double }
        targetDate: { type: string, format: date }

    ## Отчёты ##
    ReportSummary:
      type: object
      properties:
        totalIncome: { type: number, format: double }
        totalExpense: { type: number, format: double }
        balance: { type: number, format: double }
        topCategories:
          type: array
          items:
            type: object
            properties:
              category: { type: string }
              expense: { type: number, format: double }

    ExportRequest:
      type: object
      required: [format, periodFrom, periodTo]
      properties:
        format: { type: string, enum: [pdf, csv] }
        periodFrom: { type: string, format: date }
        periodTo: { type: string, format: date }

    ## Синхронизация с банком##
    BankSyncRequest:
      type: object
      required: [bankCode, accounts]
      properties:
        bankCode:
          type: string
          description: Код банка (tinkoff / sber / alfa …)
        accounts:
          type: array
          minItems: 1
          items:
            type: object
            required: [accountId, accessToken]
            properties:
              accountId: { type: string }
              accessToken: { type: string, description: OAuth access_token банка }

    ## Ошибки ##
    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: integer }
        message: { type: string }
